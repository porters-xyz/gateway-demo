datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider      = "prisma-client-js"
    output        = "../../web-portal/backend/.generated/client"
    binaryTargets = ["native"]
}

model Org {
    id           String     @id @unique @default(cuid()) @db.VarChar(8)
    users        User[]
    active       Boolean    @default(true)
    deletedAt    DateTime?
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
    enterprise   Enterprise @relation(fields: [enterpriseId], references: [id])
    enterpriseId String
}

model Enterprise {
    id        String    @id @unique @default(cuid()) @db.VarChar(8)
    orgs      Org[]
    tenants   Tenant[]
    deletedAt DateTime?
    enabled   Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model Tenant {
    id            String          @id @unique @default(cuid())
    active        Boolean         @default(true)
    paymentLedger PaymentLedger[]
    relayLedger   RelayLedger[]
    Enterprise    Enterprise      @relation(fields: [enterpriseId], references: [id])
    enterpriseId  String
    secretKey     String          @unique
    apps          App[]
    deletedAt     DateTime?
    createdAt     DateTime        @default(now())
    updatedAt     DateTime        @updatedAt
}

model User {
    id         String    @id @unique @default(cuid())
    orgs       Org[]
    ethAddress String    @unique
    active     Boolean   @default(true)
    deletedAt  DateTime?
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
}

model App {
    id        String    @id @unique @default(cuid()) @db.VarChar(8)
    appRules  AppRule[]
    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    Tenant    Tenant    @relation(fields: [tenantId], references: [id])
    tenantId  String
}

model AppRule {
    id        String    @id @unique @default(cuid())
    app       App       @relation(fields: [appId], references: [id])
    appId     String
    rule      RuleType?
    value     String
    active    Boolean   @default(true)
    deletedAt DateTime?
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
}

model RuleType {
    id              String    @id @unique @default(cuid())
    name            String
    isEditable      Boolean
    isMultiple      Boolean
    validationType  String
    validationValue String
    appRule         AppRule   @relation(fields: [appRuleId], references: [id])
    appRuleId       String    @unique
    active          Boolean   @default(true)
    deletedAt       DateTime?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
}

model PaymentLedger {
    id              String          @id @unique @default(cuid())
    tenant          Tenant          @relation(fields: [tenantId], references: [id])
    tenantId        String
    referenceId     String
    amount          Int
    transactionType TransactionType
    createdAt       DateTime        @default(now())
}

enum TransactionType {
    CREDIT
    DEBIT
}

model RelayLedger {
    id              String          @id @unique @default(cuid())
    tenant          Tenant          @relation(fields: [tenantId], references: [id])
    tenantId        String
    referenceId     String
    amount          Int
    chainId         String
    keyId           String // fed from redis(redis-pg sync service // tbd
    transactionType TransactionType
    createdAt       DateTime        @default(now())
}
